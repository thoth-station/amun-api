FROM quay.io/thoth-station/s2i-thoth-ubi8-py36

USER root

RUN { \

  { [ -f '/usr/bin/dnf' ] && INSTALL_CMD='dnf install -y'; } || \

  { [ -f '/usr/bin/yum' ] && INSTALL_CMD='yum install -y'; } || \

  { INSTALL_CMD='apt-get install'; } \

}; eval $INSTALL_CMD which python3-pip

RUN pip3 install --force-reinstall --upgrade micropipenv[toml]

RUN mkdir -p /home/amun && chmod -R 777 /home/amun

RUN echo -e "[[source]]\n\\nname = \"pypi\"\n\\nurl = \"https://pypi.org/simple\"\n\\nverify_ssl = true\n\\n\n\\n[[source]]\n\\nname = \"aicoe\"\n\\nurl = \"https://tensorflow.pypi.thoth-station.ninja/index/manylinux2010/AVX2/simple/\"\n\\nverify_ssl = true\n\\n\n\\n[dev-packages]\n\\n\n\\n[requires]\n\\npython_version = \"3.6\"\n\\n\n\\n[packages.tensorflow]\n\\nindex = \"aicoe\"\n\\nversion = \"==2.2.0\"\n\\n" > "/home/amun/Pipfile"

RUN echo -e "{\n\\n    \"_meta\": {\n\\n        \"hash\": {\n\\n            \"sha256\": \"7293f4aaa077ae19df6870b0cadce2265280220d596171f834d9023ae0400a96\"\n\\n        },\n\\n        \"pipfile-spec\": 6,\n\\n        \"requires\": {\n\\n            \"python_version\": \"3.6\"\n\\n        },\n\\n        \"sources\": [\n\\n            {\n\\n                \"name\": \"pypi\",\n\\n                \"url\": \"https://pypi.org/simple\",\n\\n                \"verify_ssl\": true\n\\n            },\n\\n            {\n\\n                \"name\": \"aicoe\",\n\\n                \"url\": \"https://tensorflow.pypi.thoth-station.ninja/index/manylinux2010/AVX2/simple/\",\n\\n                \"verify_ssl\": true\n\\n            }\n\\n        ]\n\\n    },\n\\n    \"default\": {\n\\n        \"absl-py\": {\n\\n            \"hashes\": [\n\\n                \"sha256:75e737d6ce7723d9ff9b7aa1ba3233c34be62ef18d5859e706b8fdc828989830\"\n\\n            ],\n\\n            \"version\": \"==0.9.0\"\n\\n        },\n\\n        \"astunparse\": {\n\\n            \"hashes\": [\n\\n                \"sha256:5ad93a8456f0d084c3456d059fd9a92cce667963232cbf763eac3bc5b7940872\",\n\\n                \"sha256:c2652417f2c8b5bb325c885ae329bdf3f86424075c4fd1a128674bc6fba4b8e8\"\n\\n            ],\n\\n            \"version\": \"==1.6.3\"\n\\n        },\n\\n        \"cachetools\": {\n\\n            \"hashes\": [\n\\n                \"sha256:513d4ff98dd27f85743a8dc0e92f55ddb1b49e060c2d5961512855cda2c01a98\",\n\\n                \"sha256:bbaa39c3dede00175df2dc2b03d0cf18dd2d32a7de7beb68072d13043c9edb20\"\n\\n            ],\n\\n            \"version\": \"==4.1.1\"\n\\n        },\n\\n        \"certifi\": {\n\\n            \"hashes\": [\n\\n                \"sha256:5930595817496dd21bb8dc35dad090f1c2cd0adfaf21204bf6732ca5d8ee34d3\",\n\\n                \"sha256:8fc0819f1f30ba15bdb34cceffb9ef04d99f420f68eb75d901e9560b8749fc41\"\n\\n            ],\n\\n            \"version\": \"==2020.6.20\"\n\\n        },\n\\n        \"chardet\": {\n\\n            \"hashes\": [\n\\n                \"sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae\",\n\\n                \"sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691\"\n\\n            ],\n\\n            \"version\": \"==3.0.4\"\n\\n        },\n\\n        \"gast\": {\n\\n            \"hashes\": [\n\\n                \"sha256:8f46f5be57ae6889a4e16e2ca113b1703ef17f2b0abceb83793eaba9e1351a45\",\n\\n                \"sha256:b881ef288a49aa81440d2c5eb8aeefd4c2bb8993d5f50edae7413a85bfdb3b57\"\n\\n            ],\n\\n            \"version\": \"==0.3.3\"\n\\n        },\n\\n        \"google-auth\": {\n\\n            \"hashes\": [\n\\n                \"sha256:25c97cec5d4f6821f3ab67eb25b264fb00fda8fb9e2f05869bfa93dfcb8b50ee\",\n\\n                \"sha256:c6e9735a2ee829a75b546702e460489db5cc35567a27fabd70b7c459f11efd58\"\n\\n            ],\n\\n            \"version\": \"==1.20.0\"\n\\n        },\n\\n        \"google-auth-oauthlib\": {\n\\n            \"hashes\": [\n\\n                \"sha256:88d2cd115e3391eb85e1243ac6902e76e77c5fe438b7276b297fbe68015458dd\",\n\\n                \"sha256:a92a0f6f41a0fb6138454fbc02674e64f89d82a244ea32f98471733c8ef0e0e1\"\n\\n            ],\n\\n            \"version\": \"==0.4.1\"\n\\n        },\n\\n        \"google-pasta\": {\n\\n            \"hashes\": [\n\\n                \"sha256:4612951da876b1a10fe3960d7226f0c7682cf901e16ac06e473b267a5afa8954\",\n\\n                \"sha256:b32482794a366b5366a32c92a9a9201b107821889935a02b3e51f6b432ea84ed\",\n\\n                \"sha256:c9f2c8dfc8f96d0d5808299920721be30c9eec37f2389f28904f454565c8a16e\"\n\\n            ],\n\\n            \"version\": \"==0.2.0\"\n\\n        },\n\\n        \"grpcio\": {\n\\n            \"hashes\": [\n\\n                \"sha256:08362b8b09562179b14db6ffce4b88e1a6a6edac8bccb85dd35f7b214fa5a0f5\",\n\\n                \"sha256:09bea7902adc33620d68462671942e163ab12214073ffb613d2fef3df94254f6\",\n\\n                \"sha256:0c334d6cbe27ebaa9e7211236dc99f3a9ca2ea4b3bf89b0d2544df2924343cc5\",\n\\n                \"sha256:0c4e316e02fc227c6fba858707baee46f30d890754fc4acdf2cfec2ea0bf0aa1\",\n\\n                \"sha256:14743e8fdfdabbab1a2075ffafd25e0a8b1a864505e3cccdf19793766cdc4624\",\n\\n                \"sha256:1f45ec5003101f16673436b150bac73c2355cd9ae78cb14f3707be01a39b5450\",\n\\n                \"sha256:2121afee4e3ebea7df1137bfb4dc396b1856aff4c517780108d9ce82f57bf2f8\",\n\\n                \"sha256:2522f1808fe41bd8807feb5330025378553745b727eacb07562319205d1fd405\",\n\\n                \"sha256:31e9891ac742e6866aec0cf67f1892618982cfbaf08bdcf3bb2e0f0828530c38\",\n\\n                \"sha256:32fe6369143c262d096995ebdd55eeb77f0e1dbe8343a956462ef0607527c7bc\",\n\\n                \"sha256:37da010e209289085d3362f371d9feefc152790859470f5e413d84a95a8d3998\",\n\\n                \"sha256:38ab75168a9024d393bf43343960da425736038d249920955f223bc762587697\",\n\\n                \"sha256:3cb78f8078ae583810c2eb47e536b0803a039656685144db43897e8beca4e203\",\n\\n                \"sha256:474bb992355b4a3cb8d7cb783b2d81f628c16ea921cec54ff492420e11c896f5\",\n\\n                \"sha256:74e8b6bd0f7ae64a7eecfe9bf10bc7a905d3b3eb2775cd3a9fdcdafd277469dd\",\n\\n                \"sha256:795f351ef70a931f8f7be6a10a509714ec0a6e36c674a071abe5da8eb6b8bb35\",\n\\n                \"sha256:7b47ec90cab0827679b511f7f9ef4fb0077cb5d7bb3d7b917154e718bb4d983b\",\n\\n                \"sha256:7f264d740906655a147448d57e4422723639d2d3f891734b8d5eb1675cb47192\",\n\\n                \"sha256:872d45a2e01f47db095bec032470a8c5c0a5ebd00fc930b5ae35c756b20d2cff\",\n\\n                \"sha256:8d3249566b2d8b97925fbb2ae6c5b63c5ebdb919828230eae06a25e9614e051b\",\n\\n                \"sha256:9ae898c15d122a046f04ea99327e3e0bd10593eb413c4810b931103da6311a21\",\n\\n                \"sha256:ac97beab4a749c7faf6f267f7b149f6dff4f3ad64f6f6ac1d94d04019785d6a4\",\n\\n                \"sha256:afe1f9173b51945e66c72002995eb6d4217384aaaee53215ae85d8543251fec2\",\n\\n                \"sha256:b022cedea66b7d6774bbd7d32d5a8a374947fb572da1a6915210b09a6f51cbdf\",\n\\n                \"sha256:b0f7bfba0ae7a97b802348aba4e08b1e84988103cc1eb887241e7b069010058a\",\n\\n                \"sha256:b8e5194fb20f4365eacfc3c33d61662651e12e166978186faf378ee972eb0bab\",\n\\n                \"sha256:b934542dd61746651f7907d2d7878f62ef42fdb46935088fc6a1d8266a406ba5\",\n\\n                \"sha256:c8ad75925e87ed68d5f7d5e3ec4b9f2ed209fae67c0abbcbd17481cc474421ba\",\n\\n                \"sha256:d18e7fb5c5c336cc349d06cde24582e0bfa5e067fdd6268bf1519c4eb4af0199\",\n\\n                \"sha256:d5eee9d205518ee4feb9c424475ddad18a44fea97ff405780e7cd1d6df8ee96a\",\n\\n                \"sha256:e8f2f5d16e0164c415f1b31a8d9a81f2e4645a43d1b261375d6bab7b0adf511f\"\n\\n            ],\n\\n            \"version\": \"==1.30.0\"\n\\n        },\n\\n        \"h5py\": {\n\\n            \"hashes\": [\n\\n                \"sha256:063947eaed5f271679ed4ffa36bb96f57bc14f44dd4336a827d9a02702e6ce6b\",\n\\n                \"sha256:13c87efa24768a5e24e360a40e0bc4c49bcb7ce1bb13a3a7f9902cec302ccd36\",\n\\n                \"sha256:16ead3c57141101e3296ebeed79c9c143c32bdd0e82a61a2fc67e8e6d493e9d1\",\n\\n                \"sha256:3dad1730b6470fad853ef56d755d06bb916ee68a3d8272b3bab0c1ddf83bb99e\",\n\\n                \"sha256:51ae56894c6c93159086ffa2c94b5b3388c0400548ab26555c143e7cfa05b8e5\",\n\\n                \"sha256:54817b696e87eb9e403e42643305f142cd8b940fe9b3b490bbf98c3b8a894cf4\",\n\\n                \"sha256:549ad124df27c056b2e255ea1c44d30fb7a17d17676d03096ad5cd85edb32dc1\",\n\\n                \"sha256:64f74da4a1dd0d2042e7d04cf8294e04ddad686f8eba9bb79e517ae582f6668d\",\n\\n                \"sha256:6998be619c695910cb0effe5eb15d3a511d3d1a5d217d4bd0bebad1151ec2262\",\n\\n                \"sha256:6ef7ab1089e3ef53ca099038f3c0a94d03e3560e6aff0e9d6c64c55fb13fc681\",\n\\n                \"sha256:769e141512b54dee14ec76ed354fcacfc7d97fea5a7646b709f7400cf1838630\",\n\\n                \"sha256:79b23f47c6524d61f899254f5cd5e486e19868f1823298bc0c29d345c2447172\",\n\\n                \"sha256:7be5754a159236e95bd196419485343e2b5875e806fe68919e087b6351f40a70\",\n\\n                \"sha256:84412798925dc870ffd7107f045d7659e60f5d46d1c70c700375248bf6bf512d\",\n\\n                \"sha256:86868dc07b9cc8cb7627372a2e6636cdc7a53b7e2854ad020c9e9d8a4d3fd0f5\",\n\\n                \"sha256:8bb1d2de101f39743f91512a9750fb6c351c032e5cd3204b4487383e34da7f75\",\n\\n                \"sha256:a5f82cd4938ff8761d9760af3274acf55afc3c91c649c50ab18fcff5510a14a5\",\n\\n                \"sha256:aac4b57097ac29089f179bbc2a6e14102dd210618e94d77ee4831c65f82f17c0\",\n\\n                \"sha256:bffbc48331b4a801d2f4b7dac8a72609f0b10e6e516e5c480a3e3241e091c878\",\n\\n                \"sha256:c0d4b04bbf96c47b6d360cd06939e72def512b20a18a8547fa4af810258355d5\",\n\\n                \"sha256:c54a2c0dd4957776ace7f95879d81582298c5daf89e77fb8bee7378f132951de\",\n\\n                \"sha256:cbf28ae4b5af0f05aa6e7551cee304f1d317dbed1eb7ac1d827cee2f1ef97a99\",\n\\n                \"sha256:d35f7a3a6cefec82bfdad2785e78359a0e6a5fbb3f605dd5623ce88082ccd681\",\n\\n                \"sha256:d3c59549f90a891691991c17f8e58c8544060fdf3ccdea267100fa5f561ff62f\",\n\\n                \"sha256:d7ae7a0576b06cb8e8a1c265a8bc4b73d05fdee6429bffc9a26a6eb531e79d72\",\n\\n                \"sha256:ecf4d0b56ee394a0984de15bceeb97cbe1fe485f1ac205121293fc44dcf3f31f\",\n\\n                \"sha256:f0e25bb91e7a02efccb50aba6591d3fe2c725479e34769802fcdd4076abfa917\",\n\\n                \"sha256:f23951a53d18398ef1344c186fb04b26163ca6ce449ebd23404b153fd111ded9\",\n\\n                \"sha256:ff7d241f866b718e4584fa95f520cb19405220c501bd3a53ee11871ba5166ea2\"\n\\n            ],\n\\n            \"version\": \"==2.10.0\"\n\\n        },\n\\n        \"idna\": {\n\\n            \"hashes\": [\n\\n                \"sha256:b307872f855b18632ce0c21c5e45be78c0ea7ae4c15c828c20788b26921eb3f6\",\n\\n                \"sha256:b97d804b1e9b523befed77c48dacec60e6dcb0b5391d57af6a65a312a90648c0\"\n\\n            ],\n\\n            \"version\": \"==2.10\"\n\\n        },\n\\n        \"importlib-metadata\": {\n\\n            \"hashes\": [\n\\n                \"sha256:90bb658cdbbf6d1735b6341ce708fc7024a3e14e99ffdc5783edea9f9b077f83\",\n\\n                \"sha256:dc15b2969b4ce36305c51eebe62d418ac7791e9a157911d58bfb1f9ccd8e2070\"\n\\n            ],\n\\n            \"markers\": \"python_version < '3.8'\",\n\\n            \"version\": \"==1.7.0\"\n\\n        },\n\\n        \"keras-preprocessing\": {\n\\n            \"hashes\": [\n\\n                \"sha256:7b82029b130ff61cc99b55f3bd27427df4838576838c5b2f65940e4fcec99a7b\",\n\\n                \"sha256:add82567c50c8bc648c14195bf544a5ce7c1f76761536956c3d2978970179ef3\"\n\\n            ],\n\\n            \"version\": \"==1.1.2\"\n\\n        },\n\\n        \"markdown\": {\n\\n            \"hashes\": [\n\\n                \"sha256:1fafe3f1ecabfb514a5285fca634a53c1b32a81cb0feb154264d55bf2ff22c17\",\n\\n                \"sha256:c467cd6233885534bf0fe96e62e3cf46cfc1605112356c4f9981512b8174de59\"\n\\n            ],\n\\n            \"version\": \"==3.2.2\"\n\\n        },\n\\n        \"numpy\": {\n\\n            \"hashes\": [\n\\n                \"sha256:082f8d4dd69b6b688f64f509b91d482362124986d98dc7dc5f5e9f9b9c3bb983\",\n\\n                \"sha256:1bc0145999e8cb8aed9d4e65dd8b139adf1919e521177f198529687dbf613065\",\n\\n                \"sha256:309cbcfaa103fc9a33ec16d2d62569d541b79f828c382556ff072442226d1968\",\n\\n                \"sha256:3673c8b2b29077f1b7b3a848794f8e11f401ba0b71c49fbd26fb40b71788b132\",\n\\n                \"sha256:480fdd4dbda4dd6b638d3863da3be82873bba6d32d1fc12ea1b8486ac7b8d129\",\n\\n                \"sha256:56ef7f56470c24bb67fb43dae442e946a6ce172f97c69f8d067ff8550cf782ff\",\n\\n                \"sha256:5a936fd51049541d86ccdeef2833cc89a18e4d3808fe58a8abeb802665c5af93\",\n\\n                \"sha256:5b6885c12784a27e957294b60f97e8b5b4174c7504665333c5e94fbf41ae5d6a\",\n\\n                \"sha256:667c07063940e934287993366ad5f56766bc009017b4a0fe91dbd07960d0aba7\",\n\\n                \"sha256:7ed448ff4eaffeb01094959b19cbaf998ecdee9ef9932381420d514e446601cd\",\n\\n                \"sha256:8343bf67c72e09cfabfab55ad4a43ce3f6bf6e6ced7acf70f45ded9ebb425055\",\n\\n                \"sha256:92feb989b47f83ebef246adabc7ff3b9a59ac30601c3f6819f8913458610bdcc\",\n\\n                \"sha256:935c27ae2760c21cd7354402546f6be21d3d0c806fffe967f745d5f2de5005a7\",\n\\n                \"sha256:aaf42a04b472d12515debc621c31cf16c215e332242e7a9f56403d814c744624\",\n\\n                \"sha256:b12e639378c741add21fbffd16ba5ad25c0a1a17cf2b6fe4288feeb65144f35b\",\n\\n                \"sha256:b1cca51512299841bf69add3b75361779962f9cee7d9ee3bb446d5982e925b69\",\n\\n                \"sha256:b8456987b637232602ceb4d663cb34106f7eb780e247d51a260b84760fd8f491\",\n\\n                \"sha256:b9792b0ac0130b277536ab8944e7b754c69560dac0415dd4b2dbd16b902c8954\",\n\\n                \"sha256:c9591886fc9cbe5532d5df85cb8e0cc3b44ba8ce4367bd4cf1b93dc19713da72\",\n\\n                \"sha256:cf1347450c0b7644ea142712619533553f02ef23f92f781312f6a3553d031fc7\",\n\\n                \"sha256:de8b4a9b56255797cbddb93281ed92acbc510fb7b15df3f01bd28f46ebc4edae\",\n\\n                \"sha256:e1b1dc0372f530f26a03578ac75d5e51b3868b9b76cd2facba4c9ee0eb252ab1\",\n\\n                \"sha256:e45f8e981a0ab47103181773cc0a54e650b2aef8c7b6cd07405d0fa8d869444a\",\n\\n                \"sha256:e4f6d3c53911a9d103d8ec9518190e52a8b945bab021745af4939cfc7c0d4a9e\",\n\\n                \"sha256:ed8a311493cf5480a2ebc597d1e177231984c818a86875126cfd004241a73c3e\",\n\\n                \"sha256:ef71a1d4fd4858596ae80ad1ec76404ad29701f8ca7cdcebc50300178db14dfc\"\n\\n            ],\n\\n            \"version\": \"==1.19.1\"\n\\n        },\n\\n        \"oauthlib\": {\n\\n            \"hashes\": [\n\\n                \"sha256:bee41cc35fcca6e988463cacc3bcb8a96224f470ca547e697b604cc697b2f889\",\n\\n                \"sha256:df884cd6cbe20e32633f1db1072e9356f53638e4361bef4e8b03c9127c9328ea\"\n\\n            ],\n\\n            \"version\": \"==3.1.0\"\n\\n        },\n\\n        \"opt-einsum\": {\n\\n            \"hashes\": [\n\\n                \"sha256:2455e59e3947d3c275477df7f5205b30635e266fe6dc300e3d9f9646bfcea147\",\n\\n                \"sha256:59f6475f77bbc37dcf7cd748519c0ec60722e91e63ca114e68821c0c54a46549\"\n\\n            ],\n\\n            \"version\": \"==3.3.0\"\n\\n        },\n\\n        \"protobuf\": {\n\\n            \"hashes\": [\n\\n                \"sha256:0b00429b87821f1e6f3d641327864e6f271763ae61799f7540bc58a352825fe2\",\n\\n                \"sha256:2636c689a6a2441da9a2ef922a21f9b8bfd5dfe676abd77d788db4b36ea86bee\",\n\\n                \"sha256:2becd0e238ae34caf96fa7365b87f65b88aebcf7864dfe5ab461c5005f4256d9\",\n\\n                \"sha256:2db6940c1914fa3fbfabc0e7c8193d9e18b01dbb4650acac249b113be3ba8d9e\",\n\\n                \"sha256:32f0bcdf85e0040f36b4f548c71177027f2a618cab00ba235197fa9e230b7289\",\n\\n                \"sha256:3d59825cba9447e8f4fcacc1f3c892cafd28b964e152629b3f420a2fb5918b5a\",\n\\n                \"sha256:4794a7748ee645d2ae305f3f4f0abd459e789c973b5bc338008960f83e0c554b\",\n\\n                \"sha256:50b7bb2124f6a1fb0ddc6a44428ae3a21e619ad2cdf08130ac6c00534998ef07\",\n\\n                \"sha256:6009f3ebe761fad319b52199a49f1efa7a3729302947a78a3f5ea8e7e89e3ac2\",\n\\n                \"sha256:a7b6cf201e67132ca99b8a6c4812fab541fdce1ceb54bb6f66bc336ab7259138\",\n\\n                \"sha256:b6842284bb15f1b19c50c5fd496f1e2a4cfefdbdfa5d25c02620cb82793295a7\",\n\\n                \"sha256:c0c8d7c8f07eacd9e98a907941b56e57883cf83de069cfaeaa7e02c582f72ddb\",\n\\n                \"sha256:c99e5aea75b6f2b29c8d8da5bdc5f5ed8d9a5b4f15115c8316a3f0a850f94656\",\n\\n                \"sha256:e2bd5c98952db3f1bb1af2e81b6a208909d3b8a2d32f7525c5cc10a6338b6593\",\n\\n                \"sha256:e77ca4e1403b363a88bde9e31c11d093565e925e1685f40b29385a52f2320794\",\n\\n                \"sha256:ef991cbe34d7bb935ba6349406a210d3558b9379c21621c6ed7b99112af7350e\",\n\\n                \"sha256:f10ba89f9cd508dc00e469918552925ef7cba38d101ca47af1e78f2f9982c6b3\",\n\\n                \"sha256:f1796e0eb911bf5b08e76b753953effbeb6bc42c95c16597177f627eaa52c375\"\n\\n            ],\n\\n            \"version\": \"==3.12.4\"\n\\n        },\n\\n        \"pyasn1\": {\n\\n            \"hashes\": [\n\\n                \"sha256:39c7e2ec30515947ff4e87fb6f456dfc6e84857d34be479c9d4a4ba4bf46aa5d\",\n\\n                \"sha256:aef77c9fb94a3ac588e87841208bdec464471d9871bd5050a287cc9a475cd0ba\"\n\\n            ],\n\\n            \"version\": \"==0.4.8\"\n\\n        },\n\\n        \"pyasn1-modules\": {\n\\n            \"hashes\": [\n\\n                \"sha256:905f84c712230b2c592c19470d3ca8d552de726050d1d1716282a1f6146be65e\",\n\\n                \"sha256:a50b808ffeb97cb3601dd25981f6b016cbb3d31fbf57a8b8a87428e6158d0c74\"\n\\n            ],\n\\n            \"version\": \"==0.2.8\"\n\\n        },\n\\n        \"requests\": {\n\\n            \"hashes\": [\n\\n                \"sha256:b3559a131db72c33ee969480840fff4bb6dd111de7dd27c8ee1f820f4f00231b\",\n\\n                \"sha256:fe75cc94a9443b9246fc7049224f75604b113c36acb93f87b80ed42c44cbb898\"\n\\n            ],\n\\n            \"version\": \"==2.24.0\"\n\\n        },\n\\n        \"requests-oauthlib\": {\n\\n            \"hashes\": [\n\\n                \"sha256:7f71572defaecd16372f9006f33c2ec8c077c3cfa6f5911a9a90202beb513f3d\",\n\\n                \"sha256:b4261601a71fd721a8bd6d7aa1cc1d6a8a93b4a9f5e96626f8e4d91e8beeaa6a\"\n\\n            ],\n\\n            \"version\": \"==1.3.0\"\n\\n        },\n\\n        \"rsa\": {\n\\n            \"hashes\": [\n\\n                \"sha256:109ea5a66744dd859bf16fe904b8d8b627adafb9408753161e766a92e7d681fa\",\n\\n                \"sha256:6166864e23d6b5195a5cfed6cd9fed0fe774e226d8f854fcb23b7bbef0350233\"\n\\n            ],\n\\n            \"markers\": \"python_version >= '3.5'\",\n\\n            \"version\": \"==4.6\"\n\\n        },\n\\n        \"scipy\": {\n\\n            \"hashes\": [\n\\n                \"sha256:00af72998a46c25bdb5824d2b729e7dabec0c765f9deb0b504f928591f5ff9d4\",\n\\n                \"sha256:0902a620a381f101e184a958459b36d3ee50f5effd186db76e131cbefcbb96f7\",\n\\n                \"sha256:1e3190466d669d658233e8a583b854f6386dd62d655539b77b3fa25bfb2abb70\",\n\\n                \"sha256:2cce3f9847a1a51019e8c5b47620da93950e58ebc611f13e0d11f4980ca5fecb\",\n\\n                \"sha256:3092857f36b690a321a662fe5496cb816a7f4eecd875e1d36793d92d3f884073\",\n\\n                \"sha256:386086e2972ed2db17cebf88610aab7d7f6e2c0ca30042dc9a89cf18dcc363fa\",\n\\n                \"sha256:71eb180f22c49066f25d6df16f8709f215723317cc951d99e54dc88020ea57be\",\n\\n                \"sha256:770254a280d741dd3436919d47e35712fb081a6ff8bafc0f319382b954b77802\",\n\\n                \"sha256:787cc50cab3020a865640aba3485e9fbd161d4d3b0d03a967df1a2881320512d\",\n\\n                \"sha256:8a07760d5c7f3a92e440ad3aedcc98891e915ce857664282ae3c0220f3301eb6\",\n\\n                \"sha256:8d3bc3993b8e4be7eade6dcc6fd59a412d96d3a33fa42b0fa45dc9e24495ede9\",\n\\n                \"sha256:9508a7c628a165c2c835f2497837bf6ac80eb25291055f56c129df3c943cbaf8\",\n\\n                \"sha256:a144811318853a23d32a07bc7fd5561ff0cac5da643d96ed94a4ffe967d89672\",\n\\n                \"sha256:a1aae70d52d0b074d8121333bc807a485f9f1e6a69742010b33780df2e60cfe0\",\n\\n                \"sha256:a2d6df9eb074af7f08866598e4ef068a2b310d98f87dc23bd1b90ec7bdcec802\",\n\\n                \"sha256:bb517872058a1f087c4528e7429b4a44533a902644987e7b2fe35ecc223bc408\",\n\\n                \"sha256:c5cac0c0387272ee0e789e94a570ac51deb01c796b37fb2aad1fb13f85e2f97d\",\n\\n                \"sha256:cc971a82ea1170e677443108703a2ec9ff0f70752258d0e9f5433d00dda01f59\",\n\\n                \"sha256:dba8306f6da99e37ea08c08fef6e274b5bf8567bb094d1dbe86a20e532aca088\",\n\\n                \"sha256:dc60bb302f48acf6da8ca4444cfa17d52c63c5415302a9ee77b3b21618090521\",\n\\n                \"sha256:dee1bbf3a6c8f73b6b218cb28eed8dd13347ea2f87d572ce19b289d6fd3fbc59\"\n\\n            ],\n\\n            \"markers\": \"python_version >= '3'\",\n\\n            \"version\": \"==1.4.1\"\n\\n        },\n\\n        \"six\": {\n\\n            \"hashes\": [\n\\n                \"sha256:30639c035cdb23534cd4aa2dd52c3bf48f06e5f4a941509c8bafd8ce11080259\",\n\\n                \"sha256:8b74bedcbbbaca38ff6d7491d76f2b06b3592611af620f8426e82dddb04a5ced\"\n\\n            ],\n\\n            \"version\": \"==1.15.0\"\n\\n        },\n\\n        \"tensorboard\": {\n\\n            \"hashes\": [\n\\n                \"sha256:a3feb73e1221c0a512398ad2cd08570fb082d8a2ba364aa0562543ecbd3659ef\"\n\\n            ],\n\\n            \"version\": \"==2.2.2\"\n\\n        },\n\\n        \"tensorboard-plugin-wit\": {\n\\n            \"hashes\": [\n\\n                \"sha256:ee775f04821185c90d9a0e9c56970ee43d7c41403beb6629385b39517129685b\"\n\\n            ],\n\\n            \"version\": \"==1.7.0\"\n\\n        },\n\\n        \"tensorflow\": {\n\\n            \"hashes\": [\n\\n                \"sha256:e3fe079139d8663f3776c3d989492729401000b91a86bc2e636e2cce3cbfc539\"\n\\n            ],\n\\n            \"index\": \"aicoe\",\n\\n            \"version\": \"==2.2.0\"\n\\n        },\n\\n        \"tensorflow-estimator\": {\n\\n            \"hashes\": [\n\\n                \"sha256:d09dacdd127f2579cea8d5af21f4a918036b8ae246adc82f26b61f91cc247dc2\"\n\\n            ],\n\\n            \"version\": \"==2.2.0\"\n\\n        },\n\\n        \"termcolor\": {\n\\n            \"hashes\": [\n\\n                \"sha256:1d6d69ce66211143803fbc56652b41d73b4a400a2891d7bf7a1cdf4c02de613b\"\n\\n            ],\n\\n            \"version\": \"==1.1.0\"\n\\n        },\n\\n        \"urllib3\": {\n\\n            \"hashes\": [\n\\n                \"sha256:91056c15fa70756691db97756772bb1eb9678fa585d9184f24534b100dc60f4a\",\n\\n                \"sha256:e7983572181f5e1522d9c98453462384ee92a0be7fac5f1413a1e35c56cc0461\"\n\\n            ],\n\\n            \"version\": \"==1.25.10\"\n\\n        },\n\\n        \"werkzeug\": {\n\\n            \"hashes\": [\n\\n                \"sha256:2de2a5db0baeae7b2d2664949077c2ac63fbd16d98da0ff71837f7d1dea3fd43\",\n\\n                \"sha256:6c80b1e5ad3665290ea39320b91e1be1e0d5f60652b964a3070216de83d2e47c\"\n\\n            ],\n\\n            \"version\": \"==1.0.1\"\n\\n        },\n\\n        \"wheel\": {\n\\n            \"hashes\": [\n\\n                \"sha256:8788e9155fe14f54164c1b9eb0a319d98ef02c160725587ad60f14ddc57b6f96\",\n\\n                \"sha256:df277cb51e61359aba502208d680f90c0493adec6f0e848af94948778aed386e\"\n\\n            ],\n\\n            \"markers\": \"python_version >= '3'\",\n\\n            \"version\": \"==0.34.2\"\n\\n        },\n\\n        \"wrapt\": {\n\\n            \"hashes\": [\n\\n                \"sha256:b62ffa81fb85f4332a4f609cab4ac40709470da05643a082ec1eb88e6d9b97d7\"\n\\n            ],\n\\n            \"version\": \"==1.12.1\"\n\\n        },\n\\n        \"zipp\": {\n\\n            \"hashes\": [\n\\n                \"sha256:aa36550ff0c0b7ef7fa639055d797116ee891440eac1a56f378e2d3179e0320b\",\n\\n                \"sha256:c599e4d75c98f6798c509911d08a22e6c021d074469042177c8c86fb92eefd96\"\n\\n            ],\n\\n            \"version\": \"==3.1.0\"\n\\n        }\n\\n    },\n\\n    \"develop\": {}\n\\n}" > "/home/amun/Pipfile.lock"

RUN echo -e "\n\\n[global]\n\\ntrusted-host = tensorflow.pypi.thoth-station.ninja\n\\n" > "/etc/pip.conf"

RUN cd /home/amun && python3 -m venv venv/ && . venv/bin/activate && micropipenv install --deploy

RUN echo -e "#!/usr/bin/env python3\n\\n# Copyright(C) 2019, 2020 Francesco Murdaca\n\\n#\n\\n# This program is free software: you can redistribute it and / or modify\n\\n# it under the terms of the GNU General Public License as published by\n\\n# the Free Software Foundation, either version 3 of the License, or\n\\n# (at your option) any later version.\n\\n#\n\\n# This program is distributed in the hope that it will be useful,\n\\n# but WITHOUT ANY WARRANTY without even the implied warranty of\n\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\\n# GNU General Public License for more details.\n\\n#\n\\n# You should have received a copy of the GNU General Public License\n\\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\\n\n\\n\"\"\"Performance Indicator (PI): Conv2D for Tensorflow (Thoth Team).\"\"\"\n\\n\n\\nimport logging\n\\nimport os\n\\nimport sys\n\\nimport numpy as np\n\\nimport json\n\\nfrom timeit import time\n\\nimport tensorflow as tf\n\\n\n\\n_LOGGER = logging.getLogger(__name__)\n\\n\n\\n# Datatype used.\n\\n# Options:\n\\n#   half\n\\n#   bfloat16\n\\n#   float32\n\\n#   float64\n\\n_ARGS_DTYPE = os.getenv(\"TENSOR_DTYPE\", \"float32\")\n\\nprint(\"DTYPE set to %s\" % _ARGS_DTYPE, file=sys.stderr)\n\\n\n\\n# # Run on CPU or GPU.\n\\n# # Options:\n\\n# #   cpu\n\\n# #   gpu\n\\n_ARGS_DEVICE = os.getenv(\"CONV2D_DEVICE\", \"cpu\")\n\\nprint(\"DEVICE set to %s\" % _ARGS_DEVICE, file=sys.stderr)\n\\n\n\\n# Number of repetitions.\n\\n# Options:\n\\n#   A positive integer.\n\\n_ARGS_REPS = int(os.getenv(\"CONV_REPS\", 2000))\n\\nprint(\"REPS set to %s\" % _ARGS_REPS, file=sys.stderr)\n\\n\n\\n# Data format\n\\n# # Options:\n\\n# #   NHWC Channel_last (Num_samples(N) x Height(H) x Width(W) x Channels(C))\n\\n# #   NCHW Channel_first (Num_samples(N) x Channels(C) x Height(H) x Width(W))\n\\n_ARGS_DATA_FORMAT = os.getenv(\"CONV_DATA_FORMAT\", \"NHWC\")\n\\nprint(\"CONV DATA FORMAT set to %s\" % _ARGS_DATA_FORMAT, file=sys.stderr)\n\\n\n\\n# INPUT TENSOR\n\\n_ARGS_BATCH = int(os.getenv(\"BATCH\", 4))  # Number of images per convolution\n\\nprint(\"BATCH set to %s\" % _ARGS_BATCH, file=sys.stderr)\n\\n\n\\n_ARGS_INPUT_HEIGHT = int(os.getenv(\"TENSOR_INPUT_HEIGHT\", 700))\n\\nprint(\"TENSOR INPUT HEIGHT set to %s\" % _ARGS_INPUT_HEIGHT, file=sys.stderr)\n\\n\n\\n_ARGS_INPUT_WIDTH = int(os.getenv(\"TENSOR_INPUT_WIDTH\", 161))\n\\nprint(\"TENSOR INPUT WIDTH set to %s\" % _ARGS_INPUT_WIDTH, file=sys.stderr)\n\\n\n\\n_ARGS_T_INPUT_CHANNELS = int(os.getenv(\"TENSOR_INPUT_CHANNELS\", 1))\n\\nprint(\"TENSOR INPUT CHANNELS set to %s\" % _ARGS_T_INPUT_CHANNELS, file=sys.stderr)\n\\n\n\\n# FILTER\n\\n_ARGS_FILTER_HEIGHT = int(os.getenv(\"FILTER_INPUT_HEIGHT\", 20))\n\\nprint(\"FILTER INPUT HEIGHT set to %s\" % _ARGS_FILTER_HEIGHT, file=sys.stderr)\n\\n\n\\n_ARGS_FILTER_WIDTH = int(os.getenv(\"FILTER_INPUT_WIDTH\", 5))\n\\nprint(\"FILTER INPUT WIDTH set to %s\" % _ARGS_FILTER_WIDTH, file=sys.stderr)\n\\n\n\\n_ARGS_F_INPUT_CHANNELS = int(os.getenv(\"FILTER_INPUT_CHANNELS\", _ARGS_T_INPUT_CHANNELS))\n\\nprint(\"FILTER INPUT CHANNELS set to %s\" % _ARGS_F_INPUT_CHANNELS, file=sys.stderr)\n\\n\n\\n_ARGS_OUTPUT_CHANNELS = int(os.getenv(\"FILTER_OUTPUT_CHANNELS\", 32))\n\\nprint(\"FILTER OUTPUT CHANNELS set to %s\" % _ARGS_OUTPUT_CHANNELS, file=sys.stderr)\n\\n\n\\n# Padding\n\\n_ARGS_PADDING = os.getenv(\"FILTER_PADDING\", \"SAME\")\n\\nprint(\"FILTER PADDING set to %s\" % _ARGS_PADDING, file=sys.stderr)\n\\n\n\\n# Stride, the speed by which the filter moves across the image\n\\n_ARGS_STRIDES = int(os.getenv(\"FILTER_STRIDES\", 2))\n\\nprint(\"FILTER STRIDES set to %s\" % _ARGS_STRIDES, file=sys.stderr)\n\\n\n\\n# os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'\n\\n# if _ARGS_DEVICE == 'cpu':\n\\n#     os.environ['CUDA_VISIBLE_DEVICES'] = '-1'\n\\n\n\\n\n\\ndef _get_aicoe_tensorflow_build_info():\n\\n    \"\"\"Try to obtain information of AICoE TensorFlow builds.\n\\n\n\\n    Do whatever is needed in this function, if there is an error, the reported build information is\n\\n    set to None (e.g. AICoE TensorFlow is not installed and such).\n\\n    \"\"\"\n\\n    try:\n\\n        path = os.path.dirname(os.path.dirname(tf.__file__))\n\\n        build_info_path = os.path.join(\n\\n            path, \"tensorflow-\" + tf.__version__ + \".dist-info\", \"build_info.json\"\n\\n        )\n\\n        with open(build_info_path, \"r\") as build_info_file:\n\\n            build_info = json.load(build_info_file)\n\\n        return build_info\n\\n    except Exception:\n\\n        _LOGGER.exception(\n\\n            \"Failed to obtain AICoE specific build information for TensorFlow\"\n\\n        )\n\\n\n\\n    return None\n\\n\n\\n\n\\ndef _get_tensorflow_build_info():\n\\n    \"\"\"Get tensorflow build info provided by tensorflow 2.3 and above.\"\"\"\n\\n    try:\n\\n        return tf.sysconfig.get_build_info()\n\\n    except AttributeError:\n\\n        return None\n\\n\n\\n\n\\ndef create_initial_tensor(\n\\n    batch: int,\n\\n    tensor_input_height: int,\n\\n    tensor_input_width: int,\n\\n    tensor_input_channels: int,\n\\n):\n\\n    if _ARGS_DATA_FORMAT == \"NHWC\":\n\\n        init_tensor = tf.Variable(\n\\n            tf.ones(\n\\n                [\n\\n                    batch,\n\\n                    tensor_input_height,\n\\n                    tensor_input_width,\n\\n                    tensor_input_channels,\n\\n                ]\n\\n            ),\n\\n            dtype=_ARGS_DTYPE,\n\\n        )\n\\n        stride = [1] + [_ARGS_STRIDES, _ARGS_STRIDES] + [1]\n\\n\n\\n    elif _ARGS_DATA_FORMAT == \"NCHW\":\n\\n        init_tensor = tf.Variable(\n\\n            tf.ones(\n\\n                [\n\\n                    batch,\n\\n                    tensor_input_channels,\n\\n                    tensor_input_height,\n\\n                    tensor_input_width,\n\\n                ]\n\\n            ),\n\\n            dtype=_ARGS_DTYPE,\n\\n        )\n\\n        stride = [1, 1] + [_ARGS_STRIDES, _ARGS_STRIDES]\n\\n    else:\n\\n        raise ValueError(\"Unknown data_format: \" + str(_ARGS_DATA_FORMAT))\n\\n\n\\n    return init_tensor, stride\n\\n\n\\ndef bench_v1(\n\\n    batch: int,\n\\n    tensor_input_height: int,\n\\n    tensor_input_width: int,\n\\n    tensor_input_channels: int,\n\\n    filter_height: int,\n\\n    filter_width: int,\n\\n    filter_input_channels: int,\n\\n    filter_output_channels: int\n\\n):\n\\n    times = []\n\\n    with tf.device(\"/%s:0\" % (_ARGS_DEVICE)):\n\\n        init_tensor, stride = create_initial_tensor(\n\\n            batch=batch,\n\\n            tensor_input_height=tensor_input_height,\n\\n            tensor_input_width=tensor_input_width,\n\\n            tensor_input_channels=tensor_input_channels\n\\n        )\n\\n\n\\n        init_filter = tf.Variable(\n\\n            tf.ones(\n\\n                [\n\\n                    filter_height,\n\\n                    filter_width,\n\\n                    filter_input_channels,\n\\n                    filter_output_channels,\n\\n                ]\n\\n            ),\n\\n            dtype=_ARGS_DTYPE,\n\\n        )\n\\n        convolution = tf.nn.conv2d(\n\\n            init_tensor,\n\\n            filter=init_filter,\n\\n            strides=stride,\n\\n            padding=_ARGS_PADDING,\n\\n            data_format=_ARGS_DATA_FORMAT,\n\\n        )\n\\n\n\\n    config = tf.ConfigProto()\n\\n    with tf.Session(config=config) as sess:\n\\n        sess.run(tf.global_variables_initializer())\n\\n        # warmup\n\\n        sess.run(convolution.op)\n\\n\n\\n        for i in range(_ARGS_REPS):\n\\n            start = time.monotonic()\n\\n            sess.run(convolution.op)\n\\n            times.append(time.monotonic() - start)\n\\n\n\\n    times_ms = 1000 * np.array(times)  # in seconds, convert to ms\n\\n    elapsed_ms = np.median(times_ms)\n\\n    # Source: https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/python/profiler/internal/flops_registry.py#L381\n\\n    # Formula:\n\\n    #  batch_size * image_x_dim * image_y_dim * kernel_x_dim * kernel_y_dim\n\\n    #  * input_depth * output_depth * 2 / (image_x_stride * image_x_stride)\n\\n    ops = (\n\\n        batch\n\\n        * tensor_input_height\n\\n        * tensor_input_width\n\\n        * filter_height\n\\n        * filter_width\n\\n        * tensor_input_channels\n\\n        * filter_output_channels\n\\n        * 2\n\\n    ) / (_ARGS_STRIDES * _ARGS_STRIDES)\n\\n    rate = ops / elapsed_ms / 10 ** 6  # in GFLOPS. (/ milli / 10**6) == (/ 10 ** 9)\n\\n    print('conv took:   \\t%.4f ms,\\t %.2f GFLOPS' % (elapsed_ms, rate), file=sys.stderr)\n\\n\n\\n    return rate, elapsed_ms\n\\n\n\\n\n\\ndef bench_v2(\n\\n    batch: int,\n\\n    tensor_input_height: int,\n\\n    tensor_input_width: int,\n\\n    tensor_input_channels: int,\n\\n    filter_height: int,\n\\n    filter_width: int,\n\\n    filter_input_channels: int,\n\\n    filter_output_channels: int\n\\n):\n\\n    times = []\n\\n    with tf.device(\"/%s:0\" % (_ARGS_DEVICE)):\n\\n        init_tensor, stride = create_initial_tensor(\n\\n            batch=batch,\n\\n            tensor_input_height=tensor_input_height,\n\\n            tensor_input_width=tensor_input_width,\n\\n            tensor_input_channels=tensor_input_channels\n\\n        )\n\\n\n\\n        init_filter = tf.Variable(\n\\n            tf.ones(\n\\n                [\n\\n                    filter_height,\n\\n                    filter_width,\n\\n                    filter_input_channels,\n\\n                    filter_output_channels,\n\\n                ]\n\\n            ),\n\\n            dtype=_ARGS_DTYPE,\n\\n        )\n\\n\n\\n        for i in range(_ARGS_REPS):\n\\n            start = time.monotonic()\n\\n            convolution = tf.nn.conv2d(\n\\n                init_tensor,\n\\n                filters=init_filter,\n\\n                strides=stride,\n\\n                padding=_ARGS_PADDING,\n\\n                data_format=_ARGS_DATA_FORMAT,\n\\n            )\n\\n            times.append(time.monotonic() - start)\n\\n\n\\n    times_ms = 1000 * np.array(times)  # in seconds, convert to ms\n\\n    elapsed_ms = np.median(times_ms)\n\\n    # Source: https://github.com/tensorflow/tensorflow/blob/c19e29306ce1777456b2dbb3a14f511edf7883a8/tensorflow/python/profiler/internal/flops_registry.py#L381\n\\n    # Formula:\n\\n    #  batch_size * image_x_dim * image_y_dim * kernel_x_dim * kernel_y_dim\n\\n    #  * input_depth * output_depth * 2 / (image_x_stride * image_x_stride)\n\\n    ops = (\n\\n        batch\n\\n        * tensor_input_height\n\\n        * tensor_input_width\n\\n        * filter_height\n\\n        * filter_width\n\\n        * tensor_input_channels\n\\n        * filter_output_channels\n\\n        * 2\n\\n    ) / (_ARGS_STRIDES * _ARGS_STRIDES)\n\\n    rate = ops / elapsed_ms / 10 ** 6  # in GFLOPS. (/ milli / 10**6) == (/ 10 ** 9)\n\\n    print('conv took:   \\t%.4f ms,\\t %.2f GFLOPS' % (elapsed_ms, rate), file=sys.stderr)\n\\n\n\\n    return rate, elapsed_ms\n\\n\n\\n\n\\ndef main():\n\\n    np.set_printoptions(suppress=True)\n\\n    tf_version = tf.__version__\n\\n    print(\"# Version: %s, path: %s\" % (tf_version, tf.__path__), file=sys.stderr)\n\\n\n\\n    if int(tf_version[0]) >= 2:\n\\n        rate, elapsed = bench_v2(\n\\n            batch=_ARGS_BATCH,\n\\n            tensor_input_height=_ARGS_INPUT_HEIGHT,\n\\n            tensor_input_width=_ARGS_INPUT_WIDTH,\n\\n            tensor_input_channels=_ARGS_T_INPUT_CHANNELS,\n\\n            filter_height=_ARGS_FILTER_HEIGHT,\n\\n            filter_width=_ARGS_FILTER_WIDTH,\n\\n            filter_input_channels=_ARGS_F_INPUT_CHANNELS,\n\\n            filter_output_channels=_ARGS_OUTPUT_CHANNELS\n\\n        )\n\\n    else:\n\\n        rate, elapsed = bench_v1(\n\\n            batch=_ARGS_BATCH,\n\\n            tensor_input_height=_ARGS_INPUT_HEIGHT,\n\\n            tensor_input_width=_ARGS_INPUT_WIDTH,\n\\n            tensor_input_channels=_ARGS_T_INPUT_CHANNELS,\n\\n            filter_height=_ARGS_FILTER_HEIGHT,\n\\n            filter_width=_ARGS_FILTER_WIDTH,\n\\n            filter_input_channels=_ARGS_F_INPUT_CHANNELS,\n\\n            filter_output_channels=_ARGS_OUTPUT_CHANNELS\n\\n        )\n\\n\n\\n    result = {\n\\n        \"component\": \"tensorflow\",\n\\n        \"name\": \"PiConv2D\",\n\\n        \"@parameters\": {\n\\n            \"dtype\": _ARGS_DTYPE,\n\\n            \"device\": _ARGS_DEVICE,\n\\n            \"reps\": _ARGS_REPS,\n\\n            \"batch\": _ARGS_BATCH,\n\\n            \"input_height\": _ARGS_INPUT_HEIGHT,\n\\n            \"input_width\": _ARGS_INPUT_WIDTH,\n\\n            \"input_channels\": _ARGS_T_INPUT_CHANNELS,\n\\n            \"filter_height\": _ARGS_FILTER_HEIGHT,\n\\n            \"filter_width\": _ARGS_FILTER_WIDTH,\n\\n            \"output_channels\": _ARGS_OUTPUT_CHANNELS,\n\\n            \"strides\": _ARGS_STRIDES,\n\\n            \"padding\": _ARGS_PADDING,\n\\n            \"data_format\": _ARGS_DATA_FORMAT,\n\\n        },\n\\n        \"@result\": {\"rate\": rate, \"elapsed\": elapsed},\n\\n        \"tensorflow_aicoe_buildinfo\": _get_aicoe_tensorflow_build_info(),\n\\n        \"tensorflow_upstream_buildinfo\": _get_tensorflow_build_info(),\n\\n    }\n\\n    json.dump(result, sys.stdout, indent=2)\n\\n\n\\n\n\\nif __name__ == \"__main__\":\n\\n    main()\n\\n" > "/home/amun/script"

RUN echo -e "#!/usr/bin/env python3\n\\n# Amun\n\\n# Copyright(C) 2018, 2019, 2020 Fridolin Pokorny\n\\n#\n\\n# This program is free software: you can redistribute it and / or modify\n\\n# it under the terms of the GNU General Public License as published by\n\\n# the Free Software Foundation, either version 3 of the License, or\n\\n# (at your option) any later version.\n\\n#\n\\n# This program is distributed in the hope that it will be useful,\n\\n# but WITHOUT ANY WARRANTY without even the implied warranty of\n\\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n\\n# GNU General Public License for more details.\n\\n#\n\\n# You should have received a copy of the GNU General Public License\n\\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\\n\n\\n\"\"\"This file is run by an inspection pod to gather runtime information.\n\\n\n\\nThis script should not use any external libraries except for Python's standard\n\\nlibrary. It acts as wrapper around user supplied script and prints command\n\\nresults to stdout as a JSON. It also aggregates information from hwinfo\n\\ninit-container aggregating hardware information.\n\\n\"\"\"\n\\n\n\\nimport os\n\\nimport resource\n\\nimport json\n\\nimport subprocess\n\\nimport hashlib\n\\nimport sys\n\\n\n\\nfrom datetime import datetime\n\\nfrom pathlib import Path\n\\n\n\\n\n\\n# A path to file containing hardware information as gathered by init-container\n\\n# amun-hwinfo.\n\\n_HWINFO_FILE = \"/home/amun/hwinfo/info.json\"\n\\n# We use a file for stdout and stderr not to block on pipe.\n\\n_EXEC_STDOUT_FILE = \"/home/amun/script.stdout\"\n\\n_EXEC_STDERR_FILE = \"/home/amun/script.stderr\"\n\\n# Executable to be run.\n\\n_EXEC_DIR = \"/home/amun\"\n\\n_EXEC_FILE = os.path.join(_EXEC_DIR, \"script\")\n\\n_ETC_OS_RELEASE = \"/etc/os-release\"\n\\n# Names of items on certain position in return value of resource.getrusage()\n\\n#   https://docs.python.org/3.6/library/resource.html#resource.getrusage\n\\n_RESOURCE_STRUCT_RUSAGE_ITEMS = (\n\\n    \"ru_utime\",\n\\n    \"ru_stime\",\n\\n    \"ru_maxrss\",\n\\n    \"ru_ixrss\",\n\\n    \"ru_idrss\",\n\\n    \"ru_isrss\",\n\\n    \"ru_minflt\",\n\\n    \"ru_majflt\",\n\\n    \"ru_nswap\",\n\\n    \"ru_inblock\",\n\\n    \"ru_oublock\",\n\\n    \"ru_msgsnd\",\n\\n    \"ru_msgrcv\",\n\\n    \"ru_nsignals\",\n\\n    \"ru_nvcsw\",\n\\n    \"ru_nivcsw\",\n\\n)\n\\n\n\\n\n\\ndef _gather_os_release():\n\\n    \"\"\"Gather information about operating system used.\"\"\"\n\\n    if not os.path.isfile(_ETC_OS_RELEASE):\n\\n        return None\n\\n\n\\n    try:\n\\n        with open(_ETC_OS_RELEASE, \"r\") as os_release_file:\n\\n            content = os_release_file.read()\n\\n    except Exception:\n\\n        return None\n\\n\n\\n    result = {}\n\\n    for line in content.splitlines():\n\\n        parts = line.split(\"=\", maxsplit=1)\n\\n        if len(parts) != 2:\n\\n            continue\n\\n\n\\n        key = parts[0].lower()\n\\n        value = parts[1].strip('\"')\n\\n\n\\n        result[key] = value\n\\n\n\\n    return result\n\\n\n\\n\n\\ndef _gather_runtime_environment(os_release: dict, hwinfo: dict):\n\\n    \"\"\"Gather information about runtime environment.\"\"\"\n\\n    return {\n\\n        \"cuda_version\": None,\n\\n        \"hardware\": {\n\\n            \"cpu_family\": hwinfo[\"cpu_info\"].get(\"family\"),\n\\n            \"cpu_model\": hwinfo[\"cpu_info\"].get(\"model\")\n\\n            },\n\\n        \"operating_system\": {\n\\n            \"name\": os_release[\"id\"],\n\\n            \"version\": os_release[\"version_id\"]\n\\n            },\n\\n        \"python_version\": \".\".join(map(str, sys.version_info[0:2]))\n\\n        }\n\\n\n\\n\n\\ndef main():\n\\n    \"\"\"Entrypoint for inspection container.\"\"\"\n\\n    # Load hardware info.\n\\n    hwinfo = None\n\\n    with open(_HWINFO_FILE, \"r\") as hwinfo_file:\n\\n        hwinfo = json.load(hwinfo_file)\n\\n\n\\n    # Execute the supplied script.\n\\n    if os.path.isdir(os.path.join(_EXEC_DIR, \"venv\")):\n\\n        args = [os.path.join(_EXEC_DIR, \"venv\", \"bin\", \"python3\"), _EXEC_FILE]\n\\n    else:\n\\n        args = [\"pipenv\", \"run\", _EXEC_FILE]\n\\n    with open(_EXEC_STDOUT_FILE, \"w\") as stdout_file, open(_EXEC_STDERR_FILE, \"w\") as stderr_file:\n\\n        process = subprocess.Popen(args, stdout=stdout_file, stderr=stderr_file, universal_newlines=True)\n\\n\n\\n    process.communicate()\n\\n\n\\n    usage_info = resource.getrusage(resource.RUSAGE_CHILDREN)\n\\n\n\\n    usage = {}\n\\n    for idx in range(len(_RESOURCE_STRUCT_RUSAGE_ITEMS)):\n\\n        usage[_RESOURCE_STRUCT_RUSAGE_ITEMS[idx]] = usage_info[idx]\n\\n\n\\n    # Load stdout and stderr.\n\\n    with open(_EXEC_STDOUT_FILE, \"r\") as stdout_file:\n\\n        stdout = stdout_file.read()\n\\n        try:\n\\n            stdout = json.loads(str(stdout))\n\\n        except Exception:\n\\n            # We were not able to load JSON, pass string as output.\n\\n            pass\n\\n\n\\n    # Gather os_release\n\\n    os_release = _gather_os_release()\n\\n\n\\n    # Create runtime environment output\n\\n    runtime_environment = _gather_runtime_environment(os_release, hwinfo)\n\\n\n\\n    with open(_EXEC_STDERR_FILE, \"r\") as stderr_file:\n\\n        stderr = stderr_file.read()\n\\n\n\\n    # Compute script SHA-256.\n\\n    sha256 = hashlib.sha256()\n\\n    with open(_EXEC_FILE, \"rb\") as script_file:\n\\n        while True:\n\\n            data = script_file.read(65536)\n\\n            if not data:\n\\n                break\n\\n\n\\n            sha256.update(data)\n\\n\n\\n    # Name return code as exit_code to be consistent in Thoth.\n\\n    report = {\n\\n        \"hwinfo\": hwinfo,\n\\n        \"stdout\": stdout or {},\n\\n        \"stderr\": stderr,\n\\n        \"exit_code\": process.returncode,\n\\n        \"script_sha256\": sha256.hexdigest(),\n\\n        \"usage\": usage,\n\\n        \"datetime\": datetime.utcnow().strftime(\"%Y-%m-%dT%H:%M:%S.%f\"),\n\\n        \"os_release\": os_release,\n\\n        \"runtime_environment\": runtime_environment\n\\n    }\n\\n\n\\n    output = json.dumps(report, sort_keys=True, indent=2)\n\\n\n\\n    output_fp = os.environ.get(\"THOTH_OUTPUT_ARTIFACT\")\n\\n    if output_fp:\n\\n        output_file = Path(output_fp)\n\\n\n\\n        output_file.touch(exist_ok=True)\n\\n        output_file.write_text(output)\n\\n\n\\n    sys.stdout.write(output)\n\\n    sys.exit(report[\"exit_code\"])\n\\n\n\\n\n\\nif __name__ == \"__main__\":\n\\n    main()\n\\n" > "/home/amun/entrypoint"

RUN chmod a+x /home/amun/script /home/amun/entrypoint && touch /home/amun/script.stderr /home/amun/script.stdout && chmod 777 /home/amun/script.stderr /home/amun/script.stdout

CMD ["/home/amun/entrypoint"]

USER 1042

WORKDIR /home/amun
